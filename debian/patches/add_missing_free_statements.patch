From 88c13c02aab822c0c6f6c346222df3bcdec53483 Mon Sep 17 00:00:00 2001
From: Laszlo Szemere <laszlo.szemere@oneidentity.com>
Date: Thu, 23 Apr 2020 20:11:06 +0200
Subject: [PATCH] gerror: add missing free statements

Signed-off-by: Laszlo Szemere <laszlo.szemere@oneidentity.com>
---
 lib/cfg-lexer.c                            | 1 +
 modules/dbparser/pdb-load.c                | 1 +
 modules/dbparser/pdbtool/pdbtool.c         | 3 +++
 modules/graphite/graphite-output.c         | 1 +
 modules/java/native/java-destination.c     | 1 +
 modules/java/proxies/java-template-proxy.c | 1 +
 modules/python/python-helpers.c            | 1 +
 syslog-ng/main.c                           | 1 +
 8 files changed, 10 insertions(+)

diff --git a/lib/cfg-lexer.c b/lib/cfg-lexer.c
index ba17bab74..f96e5a943 100644
--- a/lib/cfg-lexer.c
+++ b/lib/cfg-lexer.c
@@ -396,6 +396,7 @@ cfg_lexer_include_file_simple(CfgLexer *self, const gchar *filename)
           msg_error("Error opening directory for reading",
                     evt_tag_str("filename", filename),
                     evt_tag_str("error", error->message));
+          g_error_free(error);
           goto drop_level;
         }
       while ((entry = g_dir_read_name(dir)))
diff --git a/modules/dbparser/pdb-load.c b/modules/dbparser/pdb-load.c
index d57b08e03..28d21b7ac 100644
--- a/modules/dbparser/pdb-load.c
+++ b/modules/dbparser/pdb-load.c
@@ -1191,5 +1191,6 @@ pdb_rule_set_load(PDBRuleSet *self, GlobalConfig *cfg, const gchar *config, GLis
   if (parse_ctx)
     g_markup_parse_context_free(parse_ctx);
   g_hash_table_unref(state.ruleset_patterns);
+  g_error_free(error);
   return success;
 }
diff --git a/modules/dbparser/pdbtool/pdbtool.c b/modules/dbparser/pdbtool/pdbtool.c
index 7756c0033..d3c6c2b4a 100644
--- a/modules/dbparser/pdbtool/pdbtool.c
+++ b/modules/dbparser/pdbtool/pdbtool.c
@@ -216,6 +216,8 @@ pdbtool_merge_file(const gchar *filename, GString *merged)
   if (parse_ctx)
     g_markup_parse_context_free(parse_ctx);
 
+  g_error_free(error);
+
   return success;
 }
 
@@ -288,6 +290,7 @@ pdbtool_merge(int argc, char *argv[])
     {
       fprintf(stderr, "Error storing patterndb; filename='%s', errror='%s'\n", patterndb_file,
               error ? error->message : "Unknown error");
+      g_error_free(error);
       ok = FALSE;
     }
 
diff --git a/modules/graphite/graphite-output.c b/modules/graphite/graphite-output.c
index 438823536..ddc758e86 100644
--- a/modules/graphite/graphite-output.c
+++ b/modules/graphite/graphite-output.c
@@ -75,6 +75,7 @@ tf_graphite_parse_command_line_arguments(TFGraphiteState *self, gint *argc, gcha
 
   success = g_option_context_parse (ctx, argc, argv, &error);
   g_option_context_free (ctx);
+  g_error_free(error);
 
   return success;
 }
diff --git a/modules/java/native/java-destination.c b/modules/java/native/java-destination.c
index 33d9850b7..855c267dd 100644
--- a/modules/java/native/java-destination.c
+++ b/modules/java/native/java-destination.c
@@ -147,6 +147,7 @@ java_dd_init(LogPipe *s)
       msg_error("Can't compile template",
                 evt_tag_str("template", self->template_string),
                 evt_tag_str("error", error->message));
+      g_error_free(error);
       return FALSE;
     }
 
diff --git a/modules/java/proxies/java-template-proxy.c b/modules/java/proxies/java-template-proxy.c
index 5fa1f9d8d..723a535c0 100644
--- a/modules/java/proxies/java-template-proxy.c
+++ b/modules/java/proxies/java-template-proxy.c
@@ -62,6 +62,7 @@ JNICALL Java_org_syslog_1ng_LogTemplate_compile(JNIEnv *env, jobject obj, jlong
       msg_error("Can't compile template",
                 evt_tag_str("template", template_cstr),
                 evt_tag_str("error", error->message));
+      g_error_free(error);
     }
   (*env)->ReleaseStringUTFChars(env, template_string, template_cstr);
   return result;
diff --git a/modules/python/python-helpers.c b/modules/python/python-helpers.c
index 27736860e..f7ae8f25f 100644
--- a/modules/python/python-helpers.c
+++ b/modules/python/python-helpers.c
@@ -435,6 +435,7 @@ _py_string_from_string(const gchar *str, gssize len)
         }
       else
         {
+          g_error_free(error);
           if (len >= 0)
             return PyBytes_FromStringAndSize(str, len);
           else
diff --git a/syslog-ng/main.c b/syslog-ng/main.c
index a46409dbb..944c585ce 100644
--- a/syslog-ng/main.c
+++ b/syslog-ng/main.c
@@ -226,6 +226,7 @@ main(int argc, char *argv[])
   if (!g_option_context_parse(ctx, &argc, &argv, &error))
     {
       fprintf(stderr, "Error parsing command line arguments: %s\n", error ? error->message : "Invalid arguments");
+      g_error_free(error);
       g_option_context_free(ctx);
       return 1;
     }
